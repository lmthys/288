/**
 * @file main.c
 * @brief this is where the computer decides what function to call depending on the user input.
 *
 * @author Micheal, Guan, Larisa, Isaac
 *
 * @date 4/20/2017
 */
#include <inc/tm4c123gh6pm.h>
#include "lcd.h"
#include "ping.h"
#include "timer.h"
#include "WiFi.h"
#include "ir.h"
#include "servo.h"
#include <string.h>
#include "open_interface.h"
#include "Movement.h"
/**
 * This function uses the Uart_receive function to receive a whole string till you press space
 * @author Larisa Andrews
 * @param command The string that the command given into putty is made into a string
 * @data 4/20/2017
 */
char* getCommand(char* command){
	char data  = uart_receive();
	int i = 0;
		while(data != '\r'){
//			if(data == '\n'){
//				lcd_printf("h");
//			}
			*(command+i) = data;
			data = uart_receive();
			i++;

		}
	return command;
}
/**
 * This function prints # depending on the distance to the object or no object
 * @author Larisa Andrews
 * @param space the amount of #'s
 * @param deg The degrees
 * @data 4/20/2017
 */
void spaces(int space, int deg){

	char deg_char[100];

	sprintf(deg_char, "%d", deg);

	uart_sendBuffer(deg_char, strlen(deg_char));

	if(deg < 10){
		uart_sendBuffer("   ", 3);
	} else if(deg < 100){
		uart_sendBuffer("  ", 2);
	} else{
		uart_sendBuffer(" ", 1);
	}

	int scale = space / 6;
	int i = 0;

	for(i = 0; i < scale; i++){
		uart_sendBuffer("#", 1);
	}
	uart_sendBuffer("\n", 1);
	uart_sendBuffer("\r", 1);
}
/**
 * This function takes all of the sensor data and prints it to the screen
 * @author Larisa, Mike, Guan, Isaac
 *
 * @data 4/20/2017
 */
void takeData(void){

		int angle = 0;
		float ir_distance = 0.0;
		float ping_distance = 0.0;
		char* startMessage = "Degrees       IR Distance (cm)      Sonar Distance (cm)\r\n";
		float ir_data[91];
		float ping_data[91];
		int i = 0;
		int numObjects = 0;
		char sendData[100];

		uart_sendBuffer((uint8_t*) startMessage, (uint8_t) strlen(startMessage));

		turnServo(0);

		timer_waitMillis(100);


		int oD = 0;

		while(angle <= 180){


			turnServo(angle);

			timer_waitMillis(100);

			ping_trigger();

			ping_distance = ping_getDistance();
			ir_distance = ir_getDistance();

			if(angle > 10){
				if(ping_distance  < 129 && ir_distance < 60){
					if(oD == 0){
						numObjects++; // counter is how many objects
//						aD[counter] = angle; // count is the angle the servo is at
//						mid[counter] = angle;
//						lastCount = count;
						oD = 1; // detecting object

					}

			}
			else if(ir > 100){
				 // done detecting
			    if(oD == 1){
					aD[counter] = count - lastCount; // detecting the smaller object
					oD = 0;
				}
			}
									//}
			//lcd_printf("%f, %f", ir_distance, ping_distance);
			ir_data[i] = ir_distance;
			ping_data[i] = ping_distance;

			sprintf(sendData, "%d             %f               %f\r\n", angle, ir_distance, ping_distance);
			//char* sendData = "" + angle + "     " + ir_distance + "      " + ping_distance +"";

			uart_sendBuffer((uint8_t*) sendData, (uint8_t) strlen(sendData));

			timer_waitMillis(100);

			angle = angle + 2;
			++i;
		}


		int k = 0;
		int degrees = 0;
		for(k = 0; k < i; k++){
			//i is the amount of data we have in the ir and ping arrays
			spaces(ir_data[k], degrees);
			degrees += 2;

		}

		int j;

		for(j = 3; j < 90; ++j){
			if(ir_data[j -3] > 80 && ir_data[j -2] > 80 && ir_data[j -1] > 80 && ir_data[j] < 80 && ir_data[j+1] < 80){
				numObjects++;
			}
		}

		int smallestObject;
		int objectNumber = 0;
		int angleStart;
		int angleEnd;
		int smallestAngle = 182;
		int turnAngle = 0;
		int flag = 0;
		int flag2 = 0;

		for(j = 3; j < 90; ++j){
			if(ir_data[j-3] > 80 && ir_data[j-2] > 80 && ir_data[j-1] > 80 && ir_data[j] < 80 && ir_data[j+1] < 80){
				objectNumber++;
				angleStart = j;
				flag2 = 1;
			}
			if(ir_data[j-2] < 80 && ir_data[j-1] < 80 && ir_data[j] > 80 && flag2 == 1){
				angleEnd = j;
				flag  = 1;
				flag2 = 0;
			}
			if( ((angleEnd - angleStart) < smallestAngle) && flag == 1){
				turnAngle = ((angleStart * 2)  + ((angleEnd  * 2 ) - 2 )) / 2;
				smallestAngle = angleEnd - angleStart;
				smallestObject = objectNumber;
				flag = 0;
			}
		}
		lcd_printf("Number of Objects: %d Smallest Object: %d" , numObjects, smallestObject);
		turnServo(turnAngle);
}
/**
 * This is the main, in the main we get a string from the putty and decide with function to call
 * @author Larisa, Mike, Guan, Isaac
 * @data 4/20/2017
 */
int main(void) {
	lcd_init();
	ir_init();
	ping_init();
	//WiFi_start("MikeGuan17");
	PWM_init();
	uart_init();
	turnServo(0);
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data);
	char command[100]; // first command
    char command2[100]; // second command

	while(1){
		memset(command, 0, strlen(command));
		memset(command2, 0, strlen(command2));

		char* temp = getCommand(command);
		strcpy(command, temp);

		if (command[0] == '\n')
		    memmove(command, command+1, strlen(command)); // removing newline

		char* temp2 = getCommand(command2);
		if (command2[0] == '\n')
				    memmove(command2, command2+1, strlen(command2)); // removing newline

		strcpy(command2, temp2);

		lcd_printf("%s %s",command, command2);
		int i = !strcmp(command, "takeData");

		if(!strcmp(command, "takeData")){
			takeData();
			timer_waitMillis(500);

		}
		if(!strcmp(command, "Song")){
			playFinishSong(sensor_data);
		}
		if(!strcmp(command, "Forward")){

			int distance;
			sscanf(command2, "%d", &distance);
			moveForward(distance, sensor_data);
		}
		if(!strcmp(command, "TurnCW")){

			int angle;
			sscanf(command2, "%d", &angle);
			turnCW(angle, sensor_data);
		}
		if(!strcmp(command, "TurnCCW")){

			int angle;
			sscanf(command2, "%d", &angle);
			turnCCW(angle, sensor_data);
		}
	}
	return 0;
}
